// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formancehq/terraform-provider-stack/internal/server/sdk (interfaces: CloudSDK)
//
// Generated by this command:
//
//	mockgen -typed -destination=cloud_generated.go -package=sdk . CloudSDK
//

// Package sdk is a generated GoMock package.
package sdk

import (
	context "context"
	http "net/http"
	reflect "reflect"

	sdk "github.com/formancehq/terraform-provider-cloud/sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudSDK is a mock of CloudSDK interface.
type MockCloudSDK struct {
	ctrl     *gomock.Controller
	recorder *MockCloudSDKMockRecorder
	isgomock struct{}
}

// MockCloudSDKMockRecorder is the mock recorder for MockCloudSDK.
type MockCloudSDKMockRecorder struct {
	mock *MockCloudSDK
}

// NewMockCloudSDK creates a new mock instance.
func NewMockCloudSDK(ctrl *gomock.Controller) *MockCloudSDK {
	mock := &MockCloudSDK{ctrl: ctrl}
	mock.recorder = &MockCloudSDKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudSDK) EXPECT() *MockCloudSDKMockRecorder {
	return m.recorder
}

// GetStack mocks base method.
func (m *MockCloudSDK) GetStack(ctx context.Context, organizationID, stackID string) (*sdk.CreateStackResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStack", ctx, organizationID, stackID)
	ret0, _ := ret[0].(*sdk.CreateStackResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStack indicates an expected call of GetStack.
func (mr *MockCloudSDKMockRecorder) GetStack(ctx, organizationID, stackID any) *MockCloudSDKGetStackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStack", reflect.TypeOf((*MockCloudSDK)(nil).GetStack), ctx, organizationID, stackID)
	return &MockCloudSDKGetStackCall{Call: call}
}

// MockCloudSDKGetStackCall wrap *gomock.Call
type MockCloudSDKGetStackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKGetStackCall) Return(arg0 *sdk.CreateStackResponse, arg1 *http.Response, arg2 error) *MockCloudSDKGetStackCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKGetStackCall) Do(f func(context.Context, string, string) (*sdk.CreateStackResponse, *http.Response, error)) *MockCloudSDKGetStackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKGetStackCall) DoAndReturn(f func(context.Context, string, string) (*sdk.CreateStackResponse, *http.Response, error)) *MockCloudSDKGetStackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModules mocks base method.
func (m *MockCloudSDK) ListModules(ctx context.Context, organizationID, stackID string) (*sdk.ListModulesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", ctx, organizationID, stackID)
	ret0, _ := ret[0].(*sdk.ListModulesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModules indicates an expected call of ListModules.
func (mr *MockCloudSDKMockRecorder) ListModules(ctx, organizationID, stackID any) *MockCloudSDKListModulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockCloudSDK)(nil).ListModules), ctx, organizationID, stackID)
	return &MockCloudSDKListModulesCall{Call: call}
}

// MockCloudSDKListModulesCall wrap *gomock.Call
type MockCloudSDKListModulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudSDKListModulesCall) Return(arg0 *sdk.ListModulesResponse, arg1 *http.Response, arg2 error) *MockCloudSDKListModulesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudSDKListModulesCall) Do(f func(context.Context, string, string) (*sdk.ListModulesResponse, *http.Response, error)) *MockCloudSDKListModulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudSDKListModulesCall) DoAndReturn(f func(context.Context, string, string) (*sdk.ListModulesResponse, *http.Response, error)) *MockCloudSDKListModulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
