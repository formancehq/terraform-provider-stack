// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formancehq/terraform-provider-stack/internal/server/sdk (interfaces: LedgerSdkImpl)
//
// Generated by this command:
//
//	mockgen -destination=ledger_generated.go -package=sdk . LedgerSdkImpl
//

// Package sdk is a generated GoMock package.
package sdk

import (
	context "context"
	reflect "reflect"

	operations "github.com/formancehq/formance-sdk-go/v3/pkg/models/operations"
	gomock "go.uber.org/mock/gomock"
)

// MockLedgerSdkImpl is a mock of LedgerSdkImpl interface.
type MockLedgerSdkImpl struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerSdkImplMockRecorder
	isgomock struct{}
}

// MockLedgerSdkImplMockRecorder is the mock recorder for MockLedgerSdkImpl.
type MockLedgerSdkImplMockRecorder struct {
	mock *MockLedgerSdkImpl
}

// NewMockLedgerSdkImpl creates a new mock instance.
func NewMockLedgerSdkImpl(ctrl *gomock.Controller) *MockLedgerSdkImpl {
	mock := &MockLedgerSdkImpl{ctrl: ctrl}
	mock.recorder = &MockLedgerSdkImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerSdkImpl) EXPECT() *MockLedgerSdkImplMockRecorder {
	return m.recorder
}

// CreateLedger mocks base method.
func (m *MockLedgerSdkImpl) CreateLedger(ctx context.Context, request operations.V2CreateLedgerRequest) (*operations.V2CreateLedgerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedger", ctx, request)
	ret0, _ := ret[0].(*operations.V2CreateLedgerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedger indicates an expected call of CreateLedger.
func (mr *MockLedgerSdkImplMockRecorder) CreateLedger(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedger", reflect.TypeOf((*MockLedgerSdkImpl)(nil).CreateLedger), ctx, request)
}

// DeleteLedger mocks base method.
func (m *MockLedgerSdkImpl) DeleteLedger(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLedger", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLedger indicates an expected call of DeleteLedger.
func (mr *MockLedgerSdkImplMockRecorder) DeleteLedger(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLedger", reflect.TypeOf((*MockLedgerSdkImpl)(nil).DeleteLedger), ctx, name)
}

// GetLedger mocks base method.
func (m *MockLedgerSdkImpl) GetLedger(ctx context.Context, request operations.V2GetLedgerRequest) (*operations.V2GetLedgerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLedger", ctx, request)
	ret0, _ := ret[0].(*operations.V2GetLedgerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLedger indicates an expected call of GetLedger.
func (mr *MockLedgerSdkImplMockRecorder) GetLedger(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLedger", reflect.TypeOf((*MockLedgerSdkImpl)(nil).GetLedger), ctx, request)
}

// UpdateLedger mocks base method.
func (m *MockLedgerSdkImpl) UpdateLedger(ctx context.Context, request operations.V2UpdateLedgerMetadataRequest) (*operations.V2UpdateLedgerMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLedger", ctx, request)
	ret0, _ := ret[0].(*operations.V2UpdateLedgerMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedger indicates an expected call of UpdateLedger.
func (mr *MockLedgerSdkImplMockRecorder) UpdateLedger(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedger", reflect.TypeOf((*MockLedgerSdkImpl)(nil).UpdateLedger), ctx, request)
}
