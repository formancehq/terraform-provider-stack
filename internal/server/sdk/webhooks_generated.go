// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formancehq/terraform-provider-stack/internal/server/sdk (interfaces: WebhooksSdkImpl)
//
// Generated by this command:
//
//	mockgen -typed -destination=webhooks_generated.go -package=sdk . WebhooksSdkImpl
//

// Package sdk is a generated GoMock package.
package sdk

import (
	context "context"
	reflect "reflect"

	operations "github.com/formancehq/formance-sdk-go/v3/pkg/models/operations"
	shared "github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhooksSdkImpl is a mock of WebhooksSdkImpl interface.
type MockWebhooksSdkImpl struct {
	ctrl     *gomock.Controller
	recorder *MockWebhooksSdkImplMockRecorder
	isgomock struct{}
}

// MockWebhooksSdkImplMockRecorder is the mock recorder for MockWebhooksSdkImpl.
type MockWebhooksSdkImplMockRecorder struct {
	mock *MockWebhooksSdkImpl
}

// NewMockWebhooksSdkImpl creates a new mock instance.
func NewMockWebhooksSdkImpl(ctrl *gomock.Controller) *MockWebhooksSdkImpl {
	mock := &MockWebhooksSdkImpl{ctrl: ctrl}
	mock.recorder = &MockWebhooksSdkImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhooksSdkImpl) EXPECT() *MockWebhooksSdkImplMockRecorder {
	return m.recorder
}

// DeleteConfig mocks base method.
func (m *MockWebhooksSdkImpl) DeleteConfig(ctx context.Context, request operations.DeleteConfigRequest, opts ...operations.Option) (*operations.DeleteConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, request}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfig", varargs...)
	ret0, _ := ret[0].(*operations.DeleteConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfig indicates an expected call of DeleteConfig.
func (mr *MockWebhooksSdkImplMockRecorder) DeleteConfig(ctx, request any, opts ...any) *MockWebhooksSdkImplDeleteConfigCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, request}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockWebhooksSdkImpl)(nil).DeleteConfig), varargs...)
	return &MockWebhooksSdkImplDeleteConfigCall{Call: call}
}

// MockWebhooksSdkImplDeleteConfigCall wrap *gomock.Call
type MockWebhooksSdkImplDeleteConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWebhooksSdkImplDeleteConfigCall) Return(arg0 *operations.DeleteConfigResponse, arg1 error) *MockWebhooksSdkImplDeleteConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWebhooksSdkImplDeleteConfigCall) Do(f func(context.Context, operations.DeleteConfigRequest, ...operations.Option) (*operations.DeleteConfigResponse, error)) *MockWebhooksSdkImplDeleteConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWebhooksSdkImplDeleteConfigCall) DoAndReturn(f func(context.Context, operations.DeleteConfigRequest, ...operations.Option) (*operations.DeleteConfigResponse, error)) *MockWebhooksSdkImplDeleteConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetManyConfigs mocks base method.
func (m *MockWebhooksSdkImpl) GetManyConfigs(ctx context.Context, request operations.GetManyConfigsRequest) (*operations.GetManyConfigsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyConfigs", ctx, request)
	ret0, _ := ret[0].(*operations.GetManyConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyConfigs indicates an expected call of GetManyConfigs.
func (mr *MockWebhooksSdkImplMockRecorder) GetManyConfigs(ctx, request any) *MockWebhooksSdkImplGetManyConfigsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyConfigs", reflect.TypeOf((*MockWebhooksSdkImpl)(nil).GetManyConfigs), ctx, request)
	return &MockWebhooksSdkImplGetManyConfigsCall{Call: call}
}

// MockWebhooksSdkImplGetManyConfigsCall wrap *gomock.Call
type MockWebhooksSdkImplGetManyConfigsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWebhooksSdkImplGetManyConfigsCall) Return(arg0 *operations.GetManyConfigsResponse, arg1 error) *MockWebhooksSdkImplGetManyConfigsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWebhooksSdkImplGetManyConfigsCall) Do(f func(context.Context, operations.GetManyConfigsRequest) (*operations.GetManyConfigsResponse, error)) *MockWebhooksSdkImplGetManyConfigsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWebhooksSdkImplGetManyConfigsCall) DoAndReturn(f func(context.Context, operations.GetManyConfigsRequest) (*operations.GetManyConfigsResponse, error)) *MockWebhooksSdkImplGetManyConfigsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertConfig mocks base method.
func (m *MockWebhooksSdkImpl) InsertConfig(ctx context.Context, request shared.ConfigUser) (*operations.InsertConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertConfig", ctx, request)
	ret0, _ := ret[0].(*operations.InsertConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertConfig indicates an expected call of InsertConfig.
func (mr *MockWebhooksSdkImplMockRecorder) InsertConfig(ctx, request any) *MockWebhooksSdkImplInsertConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertConfig", reflect.TypeOf((*MockWebhooksSdkImpl)(nil).InsertConfig), ctx, request)
	return &MockWebhooksSdkImplInsertConfigCall{Call: call}
}

// MockWebhooksSdkImplInsertConfigCall wrap *gomock.Call
type MockWebhooksSdkImplInsertConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWebhooksSdkImplInsertConfigCall) Return(arg0 *operations.InsertConfigResponse, arg1 error) *MockWebhooksSdkImplInsertConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWebhooksSdkImplInsertConfigCall) Do(f func(context.Context, shared.ConfigUser) (*operations.InsertConfigResponse, error)) *MockWebhooksSdkImplInsertConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWebhooksSdkImplInsertConfigCall) DoAndReturn(f func(context.Context, shared.ConfigUser) (*operations.InsertConfigResponse, error)) *MockWebhooksSdkImplInsertConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateConfig mocks base method.
func (m *MockWebhooksSdkImpl) UpdateConfig(ctx context.Context, request operations.UpdateConfigRequest, opts ...operations.Option) (*operations.UpdateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, request}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfig", varargs...)
	ret0, _ := ret[0].(*operations.UpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockWebhooksSdkImplMockRecorder) UpdateConfig(ctx, request any, opts ...any) *MockWebhooksSdkImplUpdateConfigCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, request}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockWebhooksSdkImpl)(nil).UpdateConfig), varargs...)
	return &MockWebhooksSdkImplUpdateConfigCall{Call: call}
}

// MockWebhooksSdkImplUpdateConfigCall wrap *gomock.Call
type MockWebhooksSdkImplUpdateConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWebhooksSdkImplUpdateConfigCall) Return(arg0 *operations.UpdateConfigResponse, arg1 error) *MockWebhooksSdkImplUpdateConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWebhooksSdkImplUpdateConfigCall) Do(f func(context.Context, operations.UpdateConfigRequest, ...operations.Option) (*operations.UpdateConfigResponse, error)) *MockWebhooksSdkImplUpdateConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWebhooksSdkImplUpdateConfigCall) DoAndReturn(f func(context.Context, operations.UpdateConfigRequest, ...operations.Option) (*operations.UpdateConfigResponse, error)) *MockWebhooksSdkImplUpdateConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
