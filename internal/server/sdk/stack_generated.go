// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formancehq/terraform-provider-stack/internal/server/sdk (interfaces: StackSdkImpl)
//
// Generated by this command:
//
//	mockgen -typed -destination=stack_generated.go -package=sdk . StackSdkImpl
//

// Package sdk is a generated GoMock package.
package sdk

import (
	context "context"
	reflect "reflect"

	operations "github.com/formancehq/formance-sdk-go/v3/pkg/models/operations"
	gomock "go.uber.org/mock/gomock"
)

// MockStackSdkImpl is a mock of StackSdkImpl interface.
type MockStackSdkImpl struct {
	ctrl     *gomock.Controller
	recorder *MockStackSdkImplMockRecorder
	isgomock struct{}
}

// MockStackSdkImplMockRecorder is the mock recorder for MockStackSdkImpl.
type MockStackSdkImplMockRecorder struct {
	mock *MockStackSdkImpl
}

// NewMockStackSdkImpl creates a new mock instance.
func NewMockStackSdkImpl(ctrl *gomock.Controller) *MockStackSdkImpl {
	mock := &MockStackSdkImpl{ctrl: ctrl}
	mock.recorder = &MockStackSdkImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackSdkImpl) EXPECT() *MockStackSdkImplMockRecorder {
	return m.recorder
}

// GetVersions mocks base method.
func (m *MockStackSdkImpl) GetVersions(ctx context.Context) (*operations.GetVersionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersions", ctx)
	ret0, _ := ret[0].(*operations.GetVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersions indicates an expected call of GetVersions.
func (mr *MockStackSdkImplMockRecorder) GetVersions(ctx any) *MockStackSdkImplGetVersionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersions", reflect.TypeOf((*MockStackSdkImpl)(nil).GetVersions), ctx)
	return &MockStackSdkImplGetVersionsCall{Call: call}
}

// MockStackSdkImplGetVersionsCall wrap *gomock.Call
type MockStackSdkImplGetVersionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStackSdkImplGetVersionsCall) Return(arg0 *operations.GetVersionsResponse, arg1 error) *MockStackSdkImplGetVersionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStackSdkImplGetVersionsCall) Do(f func(context.Context) (*operations.GetVersionsResponse, error)) *MockStackSdkImplGetVersionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStackSdkImplGetVersionsCall) DoAndReturn(f func(context.Context) (*operations.GetVersionsResponse, error)) *MockStackSdkImplGetVersionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ledger mocks base method.
func (m *MockStackSdkImpl) Ledger() LedgerSdkImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ledger")
	ret0, _ := ret[0].(LedgerSdkImpl)
	return ret0
}

// Ledger indicates an expected call of Ledger.
func (mr *MockStackSdkImplMockRecorder) Ledger() *MockStackSdkImplLedgerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ledger", reflect.TypeOf((*MockStackSdkImpl)(nil).Ledger))
	return &MockStackSdkImplLedgerCall{Call: call}
}

// MockStackSdkImplLedgerCall wrap *gomock.Call
type MockStackSdkImplLedgerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStackSdkImplLedgerCall) Return(arg0 LedgerSdkImpl) *MockStackSdkImplLedgerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStackSdkImplLedgerCall) Do(f func() LedgerSdkImpl) *MockStackSdkImplLedgerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStackSdkImplLedgerCall) DoAndReturn(f func() LedgerSdkImpl) *MockStackSdkImplLedgerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Payments mocks base method.
func (m *MockStackSdkImpl) Payments() PaymentsSdkImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payments")
	ret0, _ := ret[0].(PaymentsSdkImpl)
	return ret0
}

// Payments indicates an expected call of Payments.
func (mr *MockStackSdkImplMockRecorder) Payments() *MockStackSdkImplPaymentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payments", reflect.TypeOf((*MockStackSdkImpl)(nil).Payments))
	return &MockStackSdkImplPaymentsCall{Call: call}
}

// MockStackSdkImplPaymentsCall wrap *gomock.Call
type MockStackSdkImplPaymentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStackSdkImplPaymentsCall) Return(arg0 PaymentsSdkImpl) *MockStackSdkImplPaymentsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStackSdkImplPaymentsCall) Do(f func() PaymentsSdkImpl) *MockStackSdkImplPaymentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStackSdkImplPaymentsCall) DoAndReturn(f func() PaymentsSdkImpl) *MockStackSdkImplPaymentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reconciliation mocks base method.
func (m *MockStackSdkImpl) Reconciliation() ReconciliationSdkImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconciliation")
	ret0, _ := ret[0].(ReconciliationSdkImpl)
	return ret0
}

// Reconciliation indicates an expected call of Reconciliation.
func (mr *MockStackSdkImplMockRecorder) Reconciliation() *MockStackSdkImplReconciliationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconciliation", reflect.TypeOf((*MockStackSdkImpl)(nil).Reconciliation))
	return &MockStackSdkImplReconciliationCall{Call: call}
}

// MockStackSdkImplReconciliationCall wrap *gomock.Call
type MockStackSdkImplReconciliationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStackSdkImplReconciliationCall) Return(arg0 ReconciliationSdkImpl) *MockStackSdkImplReconciliationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStackSdkImplReconciliationCall) Do(f func() ReconciliationSdkImpl) *MockStackSdkImplReconciliationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStackSdkImplReconciliationCall) DoAndReturn(f func() ReconciliationSdkImpl) *MockStackSdkImplReconciliationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Webhooks mocks base method.
func (m *MockStackSdkImpl) Webhooks() WebhooksSdkImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Webhooks")
	ret0, _ := ret[0].(WebhooksSdkImpl)
	return ret0
}

// Webhooks indicates an expected call of Webhooks.
func (mr *MockStackSdkImplMockRecorder) Webhooks() *MockStackSdkImplWebhooksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Webhooks", reflect.TypeOf((*MockStackSdkImpl)(nil).Webhooks))
	return &MockStackSdkImplWebhooksCall{Call: call}
}

// MockStackSdkImplWebhooksCall wrap *gomock.Call
type MockStackSdkImplWebhooksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStackSdkImplWebhooksCall) Return(arg0 WebhooksSdkImpl) *MockStackSdkImplWebhooksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStackSdkImplWebhooksCall) Do(f func() WebhooksSdkImpl) *MockStackSdkImplWebhooksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStackSdkImplWebhooksCall) DoAndReturn(f func() WebhooksSdkImpl) *MockStackSdkImplWebhooksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
