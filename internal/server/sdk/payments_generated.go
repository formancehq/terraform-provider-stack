// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formancehq/terraform-provider-stack/internal/server/sdk (interfaces: PaymentsSdkImpl)
//
// Generated by this command:
//
//	mockgen -destination=payments_generated.go -package=sdk . PaymentsSdkImpl
//

// Package sdk is a generated GoMock package.
package sdk

import (
	context "context"
	reflect "reflect"

	operations "github.com/formancehq/formance-sdk-go/v3/pkg/models/operations"
	shared "github.com/formancehq/formance-sdk-go/v3/pkg/models/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentsSdkImpl is a mock of PaymentsSdkImpl interface.
type MockPaymentsSdkImpl struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentsSdkImplMockRecorder
	isgomock struct{}
}

// MockPaymentsSdkImplMockRecorder is the mock recorder for MockPaymentsSdkImpl.
type MockPaymentsSdkImplMockRecorder struct {
	mock *MockPaymentsSdkImpl
}

// NewMockPaymentsSdkImpl creates a new mock instance.
func NewMockPaymentsSdkImpl(ctrl *gomock.Controller) *MockPaymentsSdkImpl {
	mock := &MockPaymentsSdkImpl{ctrl: ctrl}
	mock.recorder = &MockPaymentsSdkImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentsSdkImpl) EXPECT() *MockPaymentsSdkImplMockRecorder {
	return m.recorder
}

// AddAccountToPool mocks base method.
func (m *MockPaymentsSdkImpl) AddAccountToPool(ctx context.Context, request operations.V3AddAccountToPoolRequest) (*operations.V3AddAccountToPoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountToPool", ctx, request)
	ret0, _ := ret[0].(*operations.V3AddAccountToPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountToPool indicates an expected call of AddAccountToPool.
func (mr *MockPaymentsSdkImplMockRecorder) AddAccountToPool(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountToPool", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).AddAccountToPool), ctx, request)
}

// CreateConnector mocks base method.
func (m *MockPaymentsSdkImpl) CreateConnector(ctx context.Context, request operations.V3InstallConnectorRequest) (*operations.V3InstallConnectorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", ctx, request)
	ret0, _ := ret[0].(*operations.V3InstallConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnector indicates an expected call of CreateConnector.
func (mr *MockPaymentsSdkImplMockRecorder) CreateConnector(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).CreateConnector), ctx, request)
}

// CreatePool mocks base method.
func (m *MockPaymentsSdkImpl) CreatePool(ctx context.Context, request *shared.V3CreatePoolRequest) (*operations.V3CreatePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", ctx, request)
	ret0, _ := ret[0].(*operations.V3CreatePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockPaymentsSdkImplMockRecorder) CreatePool(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).CreatePool), ctx, request)
}

// DeleteConnector mocks base method.
func (m *MockPaymentsSdkImpl) DeleteConnector(ctx context.Context, request operations.V3UninstallConnectorRequest) (*operations.V3UninstallConnectorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", ctx, request)
	ret0, _ := ret[0].(*operations.V3UninstallConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnector indicates an expected call of DeleteConnector.
func (mr *MockPaymentsSdkImplMockRecorder) DeleteConnector(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).DeleteConnector), ctx, request)
}

// DeletePool mocks base method.
func (m *MockPaymentsSdkImpl) DeletePool(ctx context.Context, request operations.V3DeletePoolRequest) (*operations.V3DeletePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePool", ctx, request)
	ret0, _ := ret[0].(*operations.V3DeletePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockPaymentsSdkImplMockRecorder) DeletePool(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).DeletePool), ctx, request)
}

// GetConnector mocks base method.
func (m *MockPaymentsSdkImpl) GetConnector(ctx context.Context, request operations.V3GetConnectorConfigRequest) (*operations.V3GetConnectorConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnector", ctx, request)
	ret0, _ := ret[0].(*operations.V3GetConnectorConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnector indicates an expected call of GetConnector.
func (mr *MockPaymentsSdkImplMockRecorder) GetConnector(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnector", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).GetConnector), ctx, request)
}

// GetPool mocks base method.
func (m *MockPaymentsSdkImpl) GetPool(ctx context.Context, request operations.V3GetPoolRequest) (*operations.V3GetPoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", ctx, request)
	ret0, _ := ret[0].(*operations.V3GetPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPool indicates an expected call of GetPool.
func (mr *MockPaymentsSdkImplMockRecorder) GetPool(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).GetPool), ctx, request)
}

// RemoveAccountFromPool mocks base method.
func (m *MockPaymentsSdkImpl) RemoveAccountFromPool(ctx context.Context, request operations.V3RemoveAccountFromPoolRequest) (*operations.V3RemoveAccountFromPoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountFromPool", ctx, request)
	ret0, _ := ret[0].(*operations.V3RemoveAccountFromPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccountFromPool indicates an expected call of RemoveAccountFromPool.
func (mr *MockPaymentsSdkImplMockRecorder) RemoveAccountFromPool(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountFromPool", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).RemoveAccountFromPool), ctx, request)
}

// UpdateConnector mocks base method.
func (m *MockPaymentsSdkImpl) UpdateConnector(ctx context.Context, request operations.V3UpdateConnectorConfigRequest) (*operations.V3UpdateConnectorConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnector", ctx, request)
	ret0, _ := ret[0].(*operations.V3UpdateConnectorConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnector indicates an expected call of UpdateConnector.
func (mr *MockPaymentsSdkImplMockRecorder) UpdateConnector(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnector", reflect.TypeOf((*MockPaymentsSdkImpl)(nil).UpdateConnector), ctx, request)
}
